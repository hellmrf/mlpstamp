[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mlpstamps"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [{ name = "Heliton Martins", email = "helitonmrf@gmail.com" }]
requires-python = ">=3.10"
dependencies = [
    "arrow>=1.3.0",
    "binaryornot>=0.4.4",
    "click>=8.1.7",
    "jinja2>=3.1.4",
    "python-slugify>=8.0.4",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "rich>=13.9.4",
]
license.file = "LICENSE"
classifiers = [
    # "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python",
    "Topic :: Software Development",
]
keywords = [
    "cookiecutter",
    "Python",
    "projects",
    "project templates",
    "Jinja2",
    "skeleton",
    "scaffolding",
    "project directory",
    "package",
    "packaging",
]

[project.scripts]
mlps = "mlpstamps.__main__:main"

[project.optional-dependencies]
test = [
    "freezegun>=1.5.1",
    "pre-commit>=4.0.1",
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "safety>=3.2.11",
    "tox>=4.11.4",
]

[dependency-groups]
dev = [
    "coverage>=7.6.7",
    "doc8>=1.1.2",
    "mypy>=1.13.0",
    "ruff>=0.7.4",
    "types-pyyaml>=6.0.12.20240917",
    "types-requests>=2.32.0.20241016",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mlpstamps"]

[tool.hatch.build.targets.sdist]
include = ["src/mlpstamps", "tests", "*.md", "LICENSE"]
exclude = ["Makefile", "setup.py", "__pycache__"]

[tool.pytest.ini_options]
testpaths = "tests"
addopts = "-vvv --cov-report term-missing --cov=mlpstamps"

[tool.doc8]
# TODO: Remove current max-line-length ignore in follow-up and adopt black limit.
# max-line-length = 88
ignore = ["D001"]

[tool.ruff]

target-version = "py38"

[tool.ruff.lint]

select = [
    "A", # flake8-builtins
    #    "ANN", # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    #    "BLE",    # flake8-blind-except
    "C4", # flake8-comprehensions
    #    "C90",    # cognitive complexity
    #    "COM",    # flake8-commas
    #    "D", # pydocstyle
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "EM",  # flake8-errmsg
    #    "ERA",    # flake8-eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "FA",  # flake8-future-annotations
    #    "FBT",    # boolean trap
    "FLY",  # flynt
    "FURB", # refurb
    #    "G",      # flake8-logging-format
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "INT",  # flake8-gettext
    "ISC",  # implicit-str-concat
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    #    "PL",     # pylint
    #    "PT",     # flake8-pytest-style
    #    "PTH",    # flake8-use-pathlib
    #    "PYI",    # flake8-pyi
    #    "Q",      # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific lints
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    #    "T20",    # flake8-print
    "TCH", # flake8-type-checking
    "TID", # ban relative imports
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
]

# pydocstyle.convention = "google"

ignore = [
    "ANN101", # missing type annotation for 'self' in method
    "ANN102", # missing type annotation for 'cls' in method
    "B028",   # No explicit `stacklevel` keyword argument found
    "COM812", # ignore when using ruff-format
    "G004",   # Logging statement uses f-string
    "ISC001", # ignore when using ruff-format
    "N818",   # Exception name should be named with an Error suffix
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "S404",   # `subprocess` module is possibly insecure
]

exclude = ["tests/**/hooks/*"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D104", # Missing docstring in public package
    "D200", # One-line docstring should fit on one line with quotes
    "S101", # use of assert
    "S603", # `subprocess` call: check for execution of untrusted input"
    "S106", # Possible hardcoded password assigned to argument: "password"
    "S108", # Probable insecure usage of temporary file or directory: "/tmp"
]
"src/mlpstamps/*" = [
    "S603", # `subprocess` call: check for execution of untrusted input"
]
"docs/conf.py" = ["A001", "D100"]

[tool.ruff.format]

quote-style = "preserve"
exclude = ["tests/hooks-abort-render/hooks/*"]


[tool.mypy]
strict = true
show_error_codes = true
files = ["src/mlpstamps", "tests"]
exclude = "(?x)(/hooks/ | tests/test-output-folder/)"
no_implicit_reexport = true


[[tool.mypy.overrides]]
module = ["mlpstamps.prompt"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disable_error_code = ["no-untyped-def"]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:"]

[tool.coverage.run]
omit = ["src/mlpstamps/__main__.py"]
